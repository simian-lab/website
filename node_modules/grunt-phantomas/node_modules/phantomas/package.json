{
  "name": "phantomas",
  "version": "0.12.1",
  "author": {
    "name": "macbre",
    "email": "maciej.brencz@gmail.com",
    "url": "http://macbre.net"
  },
  "description": "PhantomJS-based web performance metrics collector",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/macbre/phantomas.git"
  },
  "keywords": [
    "high performance web sites",
    "metrics",
    "monitoring",
    "phantomas",
    "phantomjs",
    "web development",
    "webperf"
  ],
  "license": "BSD",
  "engines": {
    "node": ">=0.10"
  },
  "dependencies": {
    "analyze-css": "0.2.x",
    "ansicolors": "~0.3.2",
    "ansistyles": "~0.1.0",
    "csv-string": "~2.1.1",
    "debug": "0.7.x",
    "fast-stats": ">=0.0.2",
    "node-statsd": "0.0.7",
    "optimist": "0.6.x",
    "phantomjs": ">=1.9",
    "tap": "~0.4.8",
    "tap-eater": ">=0.0.1",
    "travis-fold": ">=0.1.2"
  },
  "devDependencies": {
    "jshint": ">=2.1.11",
    "mockery": ">=1.4",
    "vows": ">=0.7"
  },
  "optionalDependencies": {},
  "bin": {
    "phantomas": "./bin/phantomas.js"
  },
  "preferGlobal": true,
  "scripts": {
    "test": "vows --spec",
    "lint": "jshint --verbose core/ modules/ scripts/ test/ lib/*.js reporters/ run-multiple.js"
  },
  "jshintConfig": {
    "node": true,
    "-W020": false,
    "-W030": false
  },
  "readme": "phantomas\n=========\n\n![GitHub Logo](http://upload.wikimedia.org/wikipedia/en/a/a5/Fantomas.jpg)\n\nPhantomJS-based modular web performance metrics collector. And why phantomas? Well, [because](http://en.wikipedia.org/wiki/FantÃ´mas) :)\n\n[![NPM version](https://badge.fury.io/js/phantomas.png)](http://badge.fury.io/js/phantomas)\n[![Build Status](https://api.travis-ci.org/macbre/phantomas.png)](http://travis-ci.org/macbre/phantomas)\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/macbre/phantomas/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n## Requirements\n\n* [NodeJS](http://nodejs.org)\n* [PhantomJS 1.9+](http://phantomjs.org/)\n\n## Installation\n\n```\nnpm install --global phantomas\n```\n\n> This will install the latest version of PhantomJS and add a symlink called ``phantomas`` (pointing to ``./bin/phantomas.js``) to your system's ``PATH``\n\n## Features\n\n* Modular approach - each metric is generated by a separate \"module\"\n* phantomas \"core\" acts as an [events emitter](https://github.com/macbre/phantomas/wiki/Events) that each module can hook into\n* in-depth metrics such as: number of events bound via jQuery, calls to ``window.write``or [complex and duplicated CSS selectors (via analyze-css)](https://github.com/macbre/analyze-css)\n* JSON and CSV as available output formats for easy integration with automated reporting / monitoring tools\n* easy integration with Continous Integration tools via TAP format and assertions handling\n* easy integration with other nodejs projects via CommonJS module ([see API docs](https://github.com/macbre/phantomas/wiki/npm-module))\n* metrics can be emitted from JavaScript code of the page phantomas is run against (thanks to [helper functions available in window.__phantomas](https://github.com/macbre/phantomas/wiki/Phantomas-scope))\n\n## Contributors\n\n* [macbre](https://github.com/macbre)\n* [jmervine](https://github.com/jmervine)\n* [jmosney](https://github.com/jmosney)\n* [umaar](https://github.com/umaar)\n* [sjhcockrell](https://github.com/sjhcockrell)\n* [cphoover](https://github.com/cphoover)\n* [LaurentGoderre](https://github.com/LaurentGoderre)\n* [kennydee](https://github.com/kennydee)\n* [iNem0o](https://github.com/iNem0o)\n* [stefanjudis](https://github.com/stefanjudis)\n* All the [contributors](https://github.com/macbre/phantomas/graphs/contributors)\n\n## Usage\n\n> phantomas comes as both command line tool and CommonJS module ([see API docs](https://github.com/macbre/phantomas/wiki/npm-module)) that you can use in your nodejs projects.\n\n### Single run\n\n``` bash\nphantomas --url https://github.com/macbre/phantomas --verbose\n```\n\nYou can measure the performance of your site without requests to 3rd party domains (but allowing CDN that serves your static assets):\n\n```bash\nphantomas --url https://github.com/macbre/phantomas --verbose --no-externals --allow-domain .fastly.net\n```\n\n#### Parameters\n\n* `--url` URL of the page to generate metrics for (required)\n* `--reporter=[json|csv|tap|plain]` results reporter aka format (``plain`` is the default one)\n* `--timeout=[seconds]` timeout for phantomas run (defaults to 15 seconds)\n* `--viewport=[width]x[height]` phantomJS viewport dimensions (1280x1024 is the default)\n* `--verbose` writes debug messages to the console\n* `--silent` don't write anything to the console\n* `--log=[log file]` log to a given file\n* `--modules=[moduleOne],[moduleTwo]` run only selected modules\n* `--skip-modules=[moduleOne],[moduleTwo]` skip selected modules\n* `--user-agent='Custom user agent'` provide a custom user agent (will default to something similar to ``phantomas/0.6.0 (PhantomJS/1.9.0; linux 64bit)``)\n* `--config=[JSON config file]` uses JSON-formatted config file to set parameters\n* `--cookie='bar=foo;domain=url'` document.cookie formatted string for setting a single cookie\n* `--cookies-file=[JAR file]` specifies the file name to store the persistent Cookies\n* `--no-externals` block requests to 3rd party domains\n* `--allow-domain=[domain],[domain]` allow requests to given domain(s) - aka whitelist\n* `--block-domain=[domain],[domain]` disallow requests to given domain(s) - aka blacklist\n* `--disable-js` disable JavaScript on the page that will be loaded\n* `--analyze-css` emit in-depth CSS metrics **experimental**\n* `--film-strip` register film strip when page is loading **experimental**\n* `--film-strip-dir=[dir path]` folder path to output film strip (default is ``./filmstrip`` directory) **experimental**\n* `--assert-[metric-name]=value` assert that given metric should be less or equal the value\n* `--screenshot=[file name]` render fully loaded page to a given file\n* `--wait-for-selector=[CSS selector` wait for an element matching given CSS selector before generating a report, timeout setting still applies (e.g. ``--wait-for-selector \"body.loaded\"``)\n* `--post-load-delay=[seconds]` wait X seconds before generating a report, timeout setting still applies\n* `--ignore-ssl-errors` ignores SSL errors, such as expired or self-signed certificate errors\n* `--proxy=[host:port]` specifies the proxy server to use\n* `--proxy-auth=[username:password]` specifies the authentication information for the proxy\n* `--proxy-type=[http|socks5|none]` specifies the type of the proxy server (default is http)\n* `--phone` force viewport and user agent of a mobile phone\n* `--tablet` force viewport and user agent of a tablet\n\n### Multiple runs\n\n``` bash\n./run-multiple.js --url=https://github.com/macbre/phantomas  --runs=5\n```\n\n#### Parameters\n\n* `--url` URL of the page to generate metrics for (required)\n* `--runs` number of runs to perform (defaults to 3)\n* `--modules=[moduleOne],[moduleTwo]` run only selected modules\n* `--skip-modules=[moduleOne],[moduleTwo]` skip selected modules\n\n## Metrics\n\n_Current number of metrics: 99_\n\nUnits:\n\n* ms for time\n* bytes for size\n\n### Requests monitor (core module)\n\n> Due to [PhantomJS issue #10156](https://github.com/ariya/phantomjs/issues/10156) **body size related metrics are not reliable**\n\n* requests: total number of HTTP requests made\n* gzipRequests: number of gzipped HTTP responses\n* postRequests: number of POST requests\n* httpsRequests: number of HTTPS requests\n* notFound: number of HTTP 404 responses\n* timeToFirstByte: time it took to receive the first byte of the first response (that was not a redirect)\n* timeToLastByte: time it took to receive the last byte of the first response (that was not a redirect)\n* bodySize: size of the content of all responses\n* contentLength: size of the content of all responses (based on ``Content-Length`` header)\n* httpTrafficCompleted: time it took to receive the last byte of the last HTTP response\n\n### AJAX requests\n\n* ajaxRequests: number of AJAX requests\n\n### Assets types\n\n> Due to [PhantomJS issue #10156](https://github.com/ariya/phantomjs/issues/10156) **body size related metrics are not reliable**\n\n* htmlCount: number of HTML responses\n* htmlSize: size of HTML responses\n* cssCount: number of CSS responses\n* cssSize: size of CSS responses\n* jsCount: number of JS responses\n* jsSize: size of JS responses\n* jsonCount: number of JSON responses\n* jsonSize: size of JSON responses\n* imageCount: number of image responses\n* imageSize: size of image responses\n* webfontCount: number of web font responses\n* webfontSize: size of web font responses\n* base64Count: number of base64 encoded \"responses\" (no HTTP request was actually made)\n* base64Size: size of base64 encoded \"responses\"\n* otherCount: number of other responses\n* otherSize: size of other responses\n\n### Cache Hits\n\n> Metrics are calculated based on ``X-Cache`` header added by Varnish  / Squid servers\n\n* cacheHits: number of cache hits\n* cacheMisses: number of cache misses\n* cachePasses: number of cache passes\n\n### Headers\n\n* headersCount: number of requests and responses headers\n* headersSentCount: number of headers sent in requests\n* headersRecvCount: number of headers received in responses\n* headersSize: size of all headers\n* headersSentSize: size of sent headers\n* headersRecvSize: size of received headers\n\n### Domains\n\n* domains: number of domains used to fetch the page\n* maxRequestsPerDomain: maximum number of requests fetched from a single domain\n* medianRequestsPerDomain: median of requests fetched from each domain\n\n### Cookies\n\n* cookiesSent: length of cookies sent in HTTP requests\n* cookiesRecv: length of cookies received in HTTP responses\n* domainsWithCookies: number of domains with cookies set\n* documentCookiesLength: length of `document.cookie`\n* documentCookiesCount: number of cookies in `document.cookie`\n\n### DOM complexity\n\n> Metrics listed below are generated after the full page load\n\n* globalVariables: number of JS globals variables\n* bodyHTMLSize: the size of body tag content (``document.body.innerHTML.length``)\n* commentsSize: the size of HTML comments on the page\n* hiddenContentSize: the size of content of hidden elements on the page (with CSS ``display: none``)\n* whiteSpacesSize: the size of text nodes with whitespaces only\n* DOMelementsCount: total number of HTML element nodes\n* DOMelementMaxDepth: maximum level on nesting of HTML element node\n* iframesCount: number of iframe nodes\n* nodesWithInlineCSS: number of nodes with inline CSS styling (with `style` attribute)\n* imagesWithoutDimensions: number of ``<img>`` nodes without both ``width`` and ``height`` attribute\n\n### DOM queries\n\n* DOMqueries: the sum of all four metrics below\n* DOMqueriesById: number of `document.getElementById` calls\n* DOMqueriesByClassName: number of `document.getElementsByClassName` calls\n* DOMqueriesByTagName: number of `document.getElementsByTagName` calls\n* DOMqueriesByQuerySelectorAll: number of `document.querySelectorAll` calls\n* DOMinserts: number of DOM nodes inserts\n* DOMqueriesDuplicated: number of duplicated DOM queries\n\n### Event listeners\n\n* eventsBound: number of ``EventTarget.addEventListener`` calls\n\n### Window performance\n\n> Times below are relative to ``responseEnd`` entry in NavigationTiming (represented by ``timeToLastByte`` metric). See [NavigationTiming spec](http://w3c-test.org/webperf/specs/NavigationTiming/) for more information.\n\n* onDOMReadyTime: time it took to fire onDOMready event\n* onDOMReadyTimeEnd: time it took to finish processing onDOMready event **experimental**\n* windowOnLoadTime: time it took to fire window.load event\n* windowOnLoadTimeEnd: time it took to finish processing window.load event **experimental**\n* timeBackend: time to the first byte compared to the total loading time (in %)\n* timeFrontend: time to window on load compared to the total loading time (in %)\n\n### Requests statistics\n\n> **Time** is total duration, from the start of the request to the receipt of the final byte in the response. **Latency** is the time to load the first byte in the response.\n> https://developers.google.com/chrome-developer-tools/docs/network\n>\n> Includes ``HTTP 200`` responses only\n\n* smallestResponse: the size of the smallest response\n* biggestResponse: the size of the biggest response\n* fastestResponse: the time to the last byte of the fastest response\n* slowestResponse: the time to the last byte of the slowest response\n* smallestLatency: the time to the first byte of the fastest response\n* biggestLatency: the time to the first byte of the slowest response\n* medianResponse: median value of time to the last byte for all responses\n* medianLatency: median value of time to the first byte for all responses\n\n### localStorage\n\n* localStorageEntries: number of entries in local storage\n\n### jQuery\n\n> Requires jQuery 1.8.0+\n\n* jQueryVersion: version of jQuery framework (if loaded)\n* jQueryOnDOMReadyFunctions: number of functions bound to onDOMReady event\n* jQuerySizzleCalls: number of calls to [Sizzle](http://sizzlejs.com/) (including those that will be resolved using ``querySelectorAll``)\n\n### Static assets\n\n* assetsNotGzipped: static assets that were not gzipped\n* assetsWithQueryString: static assets requested with query string (e.g. ?foo) in URL\n* smallImages: images smaller than 2 kB that can be base64 encoded\n* multipleRequests: number of static assets that are requested more than once\n\n### Caching\n\n* cachingNotSpecified: responses with no caching header sent (either `Cache-Control` or `Expires`)\n* cachingTooShort: responses with too short (less than a week) caching time\n* cachingDisabled: responses with caching disabled (`max-age=0`)\n\n### Time to first asset\n\n* timeToFirstCss: time it took to receive the last byte of the first CSS\n* timeToFirstJs: time it took to receive the last byte of the first JS\n* timeToFirstImage: time it took to receive the last byte of the first image\n\n### Redirects\n\n* redirects: number of HTTP redirects (either 301 or 302)\n* redirectsTime: time it took to send and receive redirects\n\n### JavaScript bottlenecks\n\n* documentWriteCalls: number of calls to either ``document.write`` or ``document.writeln``\n* evalCalls: number of calls to ``eval`` (either direct or via ``setTimeout`` / ``setInterval``)\n\n### JavaScript errors\n\n> Error message and backtrace will be emitted as offenders\n\n* jsErrors: number of JavaScript errors\n\n### JavaScript console and alert\n\n* windowAlerts: number of calls to ``alert``\n* windowConfirms: number of calls to ``confirm``\n* windowPrompts: number of calls to ``prompt``\n* consoleMessages: number of calls to ``console.*`` functions\n\n### Optional metrics\n\n> The following metrics are emitted only when certain options are passed to phantomas\n\n* blockedRequests: number of requests blocked due to domain filtering (emitted only when in `--no-externals` / `--block-domain` mode)\n\n### CSS metrics\n\n> This is an experimental feature. Use `--analyze-css` option to enable it.\n\nTake a look at [analyze-css README](https://github.com/macbre/analyze-css) for the full list of metrics.\n\n### Reporters\n\nphantomas provides a number of reporters that can format the run results and send them to various tools. Use ``--reporter`` (or ``-R`` shortcut) option to use one.\n\n#### Formatters\n\nResults can be emitted as TAP, CSV and JSON. ``plain`` format is most useful for human beings :)\n\n#### StatsD integration\n\nMetrics from phantomas run can be sent directly to [StatsD](http://codeascraft.com/2011/02/15/measure-anything-measure-everything/) and then graphed using [graphite](http://graphite.wikidot.com/), [graphene](http://jondot.github.io/graphene/) or any other tool of your choice. For instance:\n\n```\n$ phantomas --url http://app.net/start -R statsd --statsd-host stats.app.net --statsd-port 8125 --statsd-prefix 'myApp.mainPage.'\n```\n\nwill sent metrics to StatsD running on ``stats.app.net:8125`` and prefix them with 'myApp.mainPage'.\n\n## For developers\n\n* [Project's wiki](https://github.com/macbre/phantomas/wiki)\n* Description of [events fired by phantomas core](https://github.com/macbre/phantomas/wiki/Events)\n* Description of [helper functions available to the browser in window.__phantomas](https://github.com/macbre/phantomas/wiki/Phantomas-scope)\n\n## Let's make Web a bit faster!\n\n* [Best Practices for Speeding Up Your Web Site](http://developer.yahoo.com/performance/rules.html) (by Yahoo!)\n* [Web Performance Best Practices](https://developers.google.com/speed/docs/best-practices/rules_intro) (by Google)\n* [Writing Efficient CSS](http://developer.mozilla.org/en/Writing_Efficient_CSS) (by Mozilla)\n* [Planet Performance](http://www.perfplanet.com/) - news and views from the web performance blogosphere\n* [Performance of 3rd Party Content](http://stevesouders.com/p3pc/) (by Steve Souders)\n* [Profiling CSS for fun and profit. Optimization notes.](http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/)\n* [phantomas â PhantomJS based, modular web performance metrics generator](http://calendar.perfplanet.com/2013/phantomas/) (an article for Performance Calendar)\n* [How to Measure Frontend Performance With Grunt](http://4waisenkinder.de/blog/2013/12/22/how-to-measure-frontend-performance-with-phantomas-and-grunt/)\n\n### Slides\n\n* [Know Your Engines: How to Make Your JavaScript Fast](http://cdn.oreillystatic.com/en/assets/1/event/60/Know%20Your%20Engines_%20How%20to%20Make%20Your%20JavaScript%20Fast%20Presentation%201.pdf) (by David Mandelin from Mozilla)\n* [Velocity Conf 2013 Workshop: Avoiding Web Performance Regression](http://www.slideshare.net/marcelduran/velocity-conf-2013) (by Marcel Duran from Twitter)\n\n## Utilities\n\nUse [grunt](http://gruntjs.com/) to automate daily dev tasks, including your's application web performance, via these great tools:\n\n* [grunt-phantomas](https://github.com/stefanjudis/grunt-phantomas)\n* [juve](https://github.com/jared-stilwell/juve)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/macbre/phantomas/issues"
  },
  "homepage": "https://github.com/macbre/phantomas",
  "_id": "phantomas@0.12.1",
  "dist": {
    "shasum": "5a46760bd8e9daeaeb5e64ceeeaf1189fd00f91a"
  },
  "_from": "phantomas@~0.12.0",
  "_resolved": "https://registry.npmjs.org/phantomas/-/phantomas-0.12.1.tgz"
}
