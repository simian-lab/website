{
  "name": "analyze-css",
  "version": "0.2.0",
  "author": {
    "name": "Maciej Brencz",
    "email": "maciej.brencz@gmail.com",
    "url": "https://github.com/macbre"
  },
  "description": "CSS selectors complexity and performance analyzer",
  "main": "./lib/index.js",
  "repository": {
    "type": "git",
    "url": "git://github.com/macbre/analyze-css.git"
  },
  "keywords": [
    "css",
    "analyzer",
    "complexity",
    "webperf"
  ],
  "license": "BSD",
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "css-parse": "~1.6.0",
    "debug": "0.7.x",
    "fast-stats": "0.0.x",
    "optimist": "0.6.x",
    "slick": "1.0",
    "specificity": "~0.1.3"
  },
  "devDependencies": {
    "autoprefixer": "~0.8.20131213",
    "jshint": ">=2.1.11",
    "mocha": "~1.16.0"
  },
  "bin": {
    "analyze-css": "./bin/analyze-css.js"
  },
  "preferGlobal": true,
  "scripts": {
    "test": "mocha -R dot",
    "lint": "jshint --verbose bin/ lib/ rules/ test/"
  },
  "jshintConfig": {
    "node": true
  },
  "readme": "analyze-css\n===========\n\n[![NPM version](https://badge.fury.io/js/analyze-css.png)](http://badge.fury.io/js/analyze-css)\n[![Build Status](https://api.travis-ci.org/macbre/analyze-css.png)](http://travis-ci.org/macbre/analyze-css)\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/macbre/analyze-css/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\nCSS selectors complexity and performance analyzer. analyze-css is built as a set of rules bound to events fired by CSS parser. Each rule can generate metrics and add \"offenders\" with more detailed information (see Usage section for an example).\n\n## Install\n\nanalyze-css comes as a \"binary\" for command-line and as CommonJS module. Run the following to install them globally:\n\n```\nnpm install --global analyze-css\n```\n\n## Usage\n\n### Command line tool\n\nYou can use analyze-css \"binary\" to analyze local CSS files or remote CSS assets:\n\n```\nanalyze-css --file examples/elecena.css\nanalyze-css --url http://jigsaw.w3.org/css-validator/style/base.css\n```\n\nThis will emit JSON formatted results on ``stdin``. Use ``--pretty`` option to make the output more readable.\n\n### CommonJS module\n\n```js\nvar analyzer = require('analyze-css');\n\nnew analyzer('.foo {margin: 0 !important}', function(err, results) {\n  console.error(err);\n  console.log(results); // example? see below\n});\n\n```\n\n### Results\n\n```json\n{\n  \"generator\": \"analyze-css v0.0.0\",\n  \"metrics\": {\n    \"base64Length\": 9308,\n    \"comments\": 1,\n    \"commentsLength\": 68,\n    \"complexSelectors\": 32,\n    \"duplicatedSelectors\": 7,\n    \"emptyRules\": 0,\n    \"oldIEFixes\": 51,\n    \"importants\": 3,\n    \"oldPropertyPrefixes\": 65,\n    \"qualifiedSelectors\": 28,\n    \"specificityIdAvg\": 0.05,\n    \"specificityIdTotal\": 35,\n    \"specificityClassAvg\": 1.25,\n    \"specificityClassTotal\": 872,\n    \"specificityTagAvg\": 0.78,\n    \"specificityTagTotal\": 548,\n    \"selectorsByAttribute\": 93,\n    \"selectorsByClass\": 568,\n    \"selectorsById\": 35,\n    \"selectorsByPseudo\": 166,\n    \"selectorsByTag\": 519,\n    \"universalSelectors\": 4,\n    \"length\": 51665,\n    \"rules\": 422,\n    \"selectors\": 699,\n    \"declarations\": 1240\n  },\n  \"offenders\": {\n    \"importants\": [\n      \".foo {margin: 0 !important}\"\n    ]\n  }\n}\n```\n\n## Metrics\n\n* **base64Length**: total length of base64-encoded data in CSS source (will warn about base64-encoded data bigger than 4 kB)\n* **comments**: number of comments in CSS source\n* **commentsLength**: length of comments content in CSS source\n* **complexSelectors**: number of complex selectors (consisting of more than three expressions, e.g. ``header ul li .foo``)\n* **duplicatedSelectors**: number of CSS selectors defined more than once in CSS source\n* **emptyRules**: number of rules with no properties (e.g. ``.foo { }``)\n* **oldIEFixes**: number of fixes for old versions of Internet Explorer (e.g. ``* html .foo {}`` and ``.foo { *zoom: 1 }``, [read](http://blogs.msdn.com/b/ie/archive/2005/09/02/460115.aspx) [more](http://www.impressivewebs.com/ie7-ie8-css-hacks/))\n* **importants**: number of properties with value forced by ``!important``\n* **oldPropertyPrefixes**: number of properties with no longer needed vendor prefix, powered by data provided by [autoprefixer](https://github.com/ai/autoprefixer) (e.g. ``--moz-border-radius``)\n* **qualifiedSelectors**: number of [qualified selectors](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Writing_efficient_CSS) (e.g. ``header#nav``, ``.foo#bar``, ``h1.title``)\n* **specificityIdAvg**: average [specificity](http://css-tricks.com/specifics-on-css-specificity/) for ID\n* **specificityIdTotal**: total [specificity](http://css-tricks.com/specifics-on-css-specificity/) for ID\n* **specificityClassAvg**: average [specificity](http://css-tricks.com/specifics-on-css-specificity/) for class, pseudo-class or attribute\n* **specificityClassTotal**: total [specificity](http://css-tricks.com/specifics-on-css-specificity/) for class, pseudo-class or attribute\n* **specificityTagAvg**: average [specificity](http://css-tricks.com/specifics-on-css-specificity/) for element\n* **specificityTagTotal**: total [specificity](http://css-tricks.com/specifics-on-css-specificity/) for element\n* **selectorsByAttribute**: number of selectors by attribute (e.g. ``.foo[value=bar]``)\n* **selectorsByClass**: number of selectors by class\n* **selectorsById**: number of selectors by ID\n* **selectorsByPseudo**: number of pseudo-selectors (e,g. ``:hover``)\n* **selectorsByTag**: number of selectors by tag name\n* **universalSelectors**: number of selectors trying to match every element (e.g. ``.foo > *``)\n* **length**: length of CSS source (in bytes)\n* **rules**: number of rules (e.g. ``.foo, .bar { color: red }`` is counted as one rule)\n* **selectors**: number of selectors (e.g. ``.foo, .bar { color: red }`` is counted as two selectors - ``.foo`` and ``.bar``)\n* **declarations**: number of declarations (e.g. ``.foo, .bar { color: red }`` is counted as one declaration - ``color: red``)\n\n## Read more\n\n* [Writing Efficient CSS](http://developer.mozilla.org/en/Writing_Efficient_CSS) (by Mozilla)\n* [Optimize browser rendering](https://developers.google.com/speed/docs/best-practices/rendering) (by Google)\n* [Profiling CSS for fun and profit. Optimization notes.](http://perfectionkills.com/profiling-css-for-fun-and-profit-optimization-notes/)\n* [CSS specificity](http://css-tricks.com/specifics-on-css-specificity/)\n\n## Dev hints\n\nRunning tests and linting the code:\n\n```\nnpm test && npm run-script lint\n```\n\nTurning on debug mode (i.e. verbose logging to stderr via [debug module](https://npmjs.org/package/debug)):\n\n```\nDEBUG=analyze-css* analyze-css ...\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/macbre/analyze-css/issues"
  },
  "homepage": "https://github.com/macbre/analyze-css",
  "_id": "analyze-css@0.2.0",
  "dist": {
    "shasum": "4c9781e233cf52f6e4b57df179f6173fbaf875ee"
  },
  "_from": "analyze-css@0.2.x",
  "_resolved": "https://registry.npmjs.org/analyze-css/-/analyze-css-0.2.0.tgz"
}
